
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.*;

public class main {

	
	public static void main(String[] args) throws IOException, ParseException {
		String str = "{\"name\": \"Sam Smith\", \"technology\": {\"Same\": null}, \"tech\": {\"Same\": [9]}}";  
		String str2="{\"name\": {\"tech\": \"Sam Smith\"}, \"tech\": {\"Same\": [90, {\"Game\": 80}, {\"Game\": 90},[{\"Bow\": 0}] , [{\"Game\": 90}]]}}";
		String str5 = " {\"Same\": 9}";  
		String str6="{\"Same\": [90, {\"Game\": 80}, {\"Game\": 90},[{\"Bow\": 0}] , [{\"Game\": 90}]]}";
    	JSONParser parser=new JSONParser();
    	//JSONObject json = null;
    	JSONObject json2=null;
		//	json = (JSONObject) parser.parse(str);
		//} catch (ParseException e) {
			// TODO Auto-generated catch block/			e.printStackTrace();
		//}
		//System.out.println((((JSONArray)((JSONObject)(json.get("technology"))).get("Same"))).get(0) instanceof Boolean);
		
		try {
			json2 = (JSONObject) parser.parse(str2);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	System.out.println(((JSONObject)json2.get("technology")).get("Same") ==null);
//    	Object keys[]=json.keySet().toArray();
//    	System.out.println((String)keys[0]);
//    	JSONObject jsonArray[]= {json, json2};
//    	merge(jsonArray);
		
		Path fileName=Path.of("nyt.json");
		String str3=Files.readString(fileName);
		//System.out.println(str3);
		//System.out.println(str3);
		//Map map3=new Map(str3);
		//JSONType json3=map3.createSchema();
		//System.out.println(json3.printJSON());
		JSONParser parser1=new JSONParser();
		JSONArray array=(JSONArray) parser1.parse(str3);
		//System.out.println(array.size());
		//System.out.println(array.get(0).toString());
		ArrayList<JSONType> arr=new ArrayList<>();
		for (int i=0; i<array.size();i++) {
			System.out.println(i);
			Map map=new Map(array.get(i).toString());
			arr.add(map.createSchema());
			
		}
		System.out.println(arr.size());
		
		//Map map=new Map(str);
		//Map map2=new Map(str2);
		//JSONType json=map.createSchema();
		//System.out.println(json.getMap().get("name").getType());
		//JSONType json2=map2.createSchema();
		//ArrayList<JSONType> arr=new ArrayList<>();
		//arr.add(json);
		//arr.add(json2);
		//arr.add(json3);
		KMerge2 merge=new KMerge2(arr);
		ArrayList<MergeType> result=merge.merge(arr);
		System.out.println("Data");
		PrintData(result);
		System.out.println(getSize(result));
		
		
    	
		
	}
	
	static JSONObject merge(JSONObject jsonInput[]) {
		Set<String> keys=new HashSet<String>();
		for (int i=0; i<jsonInput.length; i++) {
			Object keyArray[]=jsonInput[i].keySet().toArray();
			for (int j=0; j<keyArray.length; j++) {
				keys.add((String)keyArray[j]);
			}
		}
		Object keyArray[]=keys.toArray();
		for (int i=0; i<keyArray.length; i++) {
			System.out.println(keyArray[i]);
		}
		
		return null;
	}



//static void printData(ArrayList<Object> arr) {
//	
//	for (int i=0; i<arr.size(); i++) {
//		if (arr.get(i) instanceof JSONType) {
//			System.out.println(((JSONType)(arr.get(i))).getType());
//		}else if (arr.get(i) instanceof ArrayList) {
//			System.out.println("Array: ");
//			printData((ArrayList<Object>)arr.get(i));
//		}else if (arr.get(i) instanceof HashMap) {
//			System.out.println("{");
//			HashMap<String, ArrayList<Object>> map=((HashMap)arr.get(i));
//			Iterator keys=map.keySet().iterator();
//			while(keys.hasNext()) {
//				String key=(String) keys.next();
//				System.out.print(key+": ");
//				printData(map.get(key));
//			}
//			System.out.println("}");
//		}
//	}
//	
//}
	
	static void PrintData(ArrayList<MergeType> list) {
		for (int i=0; i<list.size(); i++) {
			MergeType merge=list.get(i);
			
			if (merge.getType().equals("array")) {
				System.out.println("array: [");
				PrintData(merge.getArray());
				System.out.println("]");
			}else if (merge.getType().equals("object")) {
				System.out.println("type: object");
				System.out.println("fields: [");
				HashMap<String, ArrayList<MergeType>> map=list.get(i).getMap();
				Iterator<String> iterate=map.keySet().iterator();
				while(iterate.hasNext()) {
					
					String key=iterate.next();
					System.out.println("name:"+key+",");
					
					PrintData(map.get(key));
				
					
				}
				System.out.println("]");
				ArrayList<String> optional=merge.getOptional();
				System.out.print("Optional: ");
				for (int j=0; j<optional.size(); j++) {
					System.out.print(optional.get(j)+", ");
				}
				System.out.println("");
				System.out.println("}");
			}else {
				System.out.println(list.get(i).getType());
				
			}
		}
	}
	
	static int getSize(ArrayList<MergeType> arr) {
		int returnNum=0;
		for (int i=0; i<arr.size(); i++) {
			if (arr.get(i).getType().equals("object")) {
				HashMap<String, ArrayList<MergeType>> map=arr.get(i).getMap();
				Iterator<String> key=map.keySet().iterator();
				while(key.hasNext()) {
					returnNum=returnNum+1+getSize(map.get(key.next()));
				}
			}else if (arr.get(i).getType().equals("array")) {
				
				returnNum=returnNum+1+getSize(arr.get(i).getArray());
			}else {
				returnNum= returnNum+1;
			}
			
		}
		return returnNum;
	}
}
